/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SupplyChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOrderRequest"
      | "addPartner"
      | "carbonEmissions"
      | "carbonEmissionsCount"
      | "completeShipment"
      | "createOrder"
      | "declineOrderRequest"
      | "delayPredictions"
      | "delayPredictionsCount"
      | "getUserLocation"
      | "orders"
      | "ordersCount"
      | "partners"
      | "partnersCount"
      | "recordCarbonEmission"
      | "recordDelayPrediction"
      | "startShipment"
      | "updateUserLocation"
      | "userLocations"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CarbonEmitted"
      | "DelayPredicted"
      | "OrderApproved"
      | "OrderCreated"
      | "OrderDeclined"
      | "PartnerAdded"
      | "ShipmentCompleted"
      | "ShipmentStarted"
      | "UserLocationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOrderRequest",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPartner",
    values: [string, string, string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonEmissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonEmissionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeShipment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "declineOrderRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delayPredictions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delayPredictionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLocation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "partnersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordCarbonEmission",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordDelayPrediction",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startShipment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserLocation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLocations",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOrderRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "carbonEmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonEmissionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineOrderRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayPredictionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordCarbonEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordDelayPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLocations",
    data: BytesLike
  ): Result;
}

export namespace CarbonEmittedEvent {
  export type InputTuple = [
    orderId: string,
    emissions: BigNumberish,
    distance: BigNumberish,
    transportType: string
  ];
  export type OutputTuple = [
    orderId: string,
    emissions: bigint,
    distance: bigint,
    transportType: string
  ];
  export interface OutputObject {
    orderId: string;
    emissions: bigint;
    distance: bigint;
    transportType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelayPredictedEvent {
  export type InputTuple = [
    orderId: string,
    probability: BigNumberish,
    reason: string,
    estimatedDelay: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    probability: bigint,
    reason: string,
    estimatedDelay: bigint
  ];
  export interface OutputObject {
    orderId: string;
    probability: bigint;
    reason: string;
    estimatedDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderApprovedEvent {
  export type InputTuple = [
    orderId: string,
    approvedBy: AddressLike,
    price: BigNumberish,
    deliveryDate: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    approvedBy: string,
    price: bigint,
    deliveryDate: bigint
  ];
  export interface OutputObject {
    orderId: string;
    approvedBy: string;
    price: bigint;
    deliveryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    orderId: string,
    supplierId: string,
    productId: string
  ];
  export type OutputTuple = [
    orderId: string,
    supplierId: string,
    productId: string
  ];
  export interface OutputObject {
    orderId: string;
    supplierId: string;
    productId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderDeclinedEvent {
  export type InputTuple = [orderId: string, declinedBy: AddressLike];
  export type OutputTuple = [orderId: string, declinedBy: string];
  export interface OutputObject {
    orderId: string;
    declinedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnerAddedEvent {
  export type InputTuple = [
    partnerId: string,
    name: string,
    walletAddress: AddressLike
  ];
  export type OutputTuple = [
    partnerId: string,
    name: string,
    walletAddress: string
  ];
  export interface OutputObject {
    partnerId: string;
    name: string;
    walletAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentCompletedEvent {
  export type InputTuple = [orderId: string];
  export type OutputTuple = [orderId: string];
  export interface OutputObject {
    orderId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentStartedEvent {
  export type InputTuple = [orderId: string, carrierId: string];
  export type OutputTuple = [orderId: string, carrierId: string];
  export interface OutputObject {
    orderId: string;
    carrierId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserLocationUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    lat: BigNumberish,
    lng: BigNumberish
  ];
  export type OutputTuple = [user: string, lat: bigint, lng: bigint];
  export interface OutputObject {
    user: string;
    lat: bigint;
    lng: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChain extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChain;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOrderRequest: TypedContractMethod<
    [orderId: string, price: BigNumberish, deliveryDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  addPartner: TypedContractMethod<
    [
      id: string,
      name: string,
      partnerType: string,
      lat: BigNumberish,
      lng: BigNumberish,
      walletAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  carbonEmissions: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, string] & {
        orderId: string;
        timestamp: bigint;
        emissions: bigint;
        distance: bigint;
        transportType: string;
      }
    ],
    "view"
  >;

  carbonEmissionsCount: TypedContractMethod<[], [bigint], "view">;

  completeShipment: TypedContractMethod<[orderId: string], [void], "payable">;

  createOrder: TypedContractMethod<
    [supplierId: string, productId: string, transportType: string],
    [void],
    "nonpayable"
  >;

  declineOrderRequest: TypedContractMethod<
    [orderId: string],
    [void],
    "nonpayable"
  >;

  delayPredictions: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, string, bigint] & {
        orderId: string;
        timestamp: bigint;
        probability: bigint;
        reason: string;
        estimatedDelay: bigint;
      }
    ],
    "view"
  >;

  delayPredictionsCount: TypedContractMethod<[], [bigint], "view">;

  getUserLocation: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { lat: bigint; lng: bigint }],
    "view"
  >;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        string,
        string
      ] & {
        id: string;
        supplierId: string;
        productId: string;
        orderDate: bigint;
        deliveryDate: bigint;
        price: bigint;
        isPaid: boolean;
        shipmentStatus: string;
        requestStatus: string;
        carrierId: string;
        transportType: string;
      }
    ],
    "view"
  >;

  ordersCount: TypedContractMethod<[], [bigint], "view">;

  partners: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string] & {
        id: string;
        name: string;
        partnerType: string;
        lat: bigint;
        lng: bigint;
        walletAddress: string;
      }
    ],
    "view"
  >;

  partnersCount: TypedContractMethod<[], [bigint], "view">;

  recordCarbonEmission: TypedContractMethod<
    [
      orderId: string,
      emissions: BigNumberish,
      distance: BigNumberish,
      transportType: string
    ],
    [void],
    "nonpayable"
  >;

  recordDelayPrediction: TypedContractMethod<
    [
      orderId: string,
      probability: BigNumberish,
      reason: string,
      estimatedDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  startShipment: TypedContractMethod<
    [orderId: string, carrierId: string],
    [void],
    "nonpayable"
  >;

  updateUserLocation: TypedContractMethod<
    [lat: BigNumberish, lng: BigNumberish],
    [void],
    "nonpayable"
  >;

  userLocations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        userAddress: string;
        lat: bigint;
        lng: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOrderRequest"
  ): TypedContractMethod<
    [orderId: string, price: BigNumberish, deliveryDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPartner"
  ): TypedContractMethod<
    [
      id: string,
      name: string,
      partnerType: string,
      lat: BigNumberish,
      lng: BigNumberish,
      walletAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "carbonEmissions"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, string] & {
        orderId: string;
        timestamp: bigint;
        emissions: bigint;
        distance: bigint;
        transportType: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "carbonEmissionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeShipment"
  ): TypedContractMethod<[orderId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [supplierId: string, productId: string, transportType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declineOrderRequest"
  ): TypedContractMethod<[orderId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delayPredictions"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, string, bigint] & {
        orderId: string;
        timestamp: bigint;
        probability: bigint;
        reason: string;
        estimatedDelay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delayPredictionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserLocation"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { lat: bigint; lng: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        string,
        string
      ] & {
        id: string;
        supplierId: string;
        productId: string;
        orderDate: bigint;
        deliveryDate: bigint;
        price: bigint;
        isPaid: boolean;
        shipmentStatus: string;
        requestStatus: string;
        carrierId: string;
        transportType: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ordersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "partners"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string] & {
        id: string;
        name: string;
        partnerType: string;
        lat: bigint;
        lng: bigint;
        walletAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "partnersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordCarbonEmission"
  ): TypedContractMethod<
    [
      orderId: string,
      emissions: BigNumberish,
      distance: BigNumberish,
      transportType: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordDelayPrediction"
  ): TypedContractMethod<
    [
      orderId: string,
      probability: BigNumberish,
      reason: string,
      estimatedDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startShipment"
  ): TypedContractMethod<
    [orderId: string, carrierId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserLocation"
  ): TypedContractMethod<
    [lat: BigNumberish, lng: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userLocations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        userAddress: string;
        lat: bigint;
        lng: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CarbonEmitted"
  ): TypedContractEvent<
    CarbonEmittedEvent.InputTuple,
    CarbonEmittedEvent.OutputTuple,
    CarbonEmittedEvent.OutputObject
  >;
  getEvent(
    key: "DelayPredicted"
  ): TypedContractEvent<
    DelayPredictedEvent.InputTuple,
    DelayPredictedEvent.OutputTuple,
    DelayPredictedEvent.OutputObject
  >;
  getEvent(
    key: "OrderApproved"
  ): TypedContractEvent<
    OrderApprovedEvent.InputTuple,
    OrderApprovedEvent.OutputTuple,
    OrderApprovedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderDeclined"
  ): TypedContractEvent<
    OrderDeclinedEvent.InputTuple,
    OrderDeclinedEvent.OutputTuple,
    OrderDeclinedEvent.OutputObject
  >;
  getEvent(
    key: "PartnerAdded"
  ): TypedContractEvent<
    PartnerAddedEvent.InputTuple,
    PartnerAddedEvent.OutputTuple,
    PartnerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentCompleted"
  ): TypedContractEvent<
    ShipmentCompletedEvent.InputTuple,
    ShipmentCompletedEvent.OutputTuple,
    ShipmentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentStarted"
  ): TypedContractEvent<
    ShipmentStartedEvent.InputTuple,
    ShipmentStartedEvent.OutputTuple,
    ShipmentStartedEvent.OutputObject
  >;
  getEvent(
    key: "UserLocationUpdated"
  ): TypedContractEvent<
    UserLocationUpdatedEvent.InputTuple,
    UserLocationUpdatedEvent.OutputTuple,
    UserLocationUpdatedEvent.OutputObject
  >;

  filters: {
    "CarbonEmitted(string,uint256,uint256,string)": TypedContractEvent<
      CarbonEmittedEvent.InputTuple,
      CarbonEmittedEvent.OutputTuple,
      CarbonEmittedEvent.OutputObject
    >;
    CarbonEmitted: TypedContractEvent<
      CarbonEmittedEvent.InputTuple,
      CarbonEmittedEvent.OutputTuple,
      CarbonEmittedEvent.OutputObject
    >;

    "DelayPredicted(string,uint256,string,uint256)": TypedContractEvent<
      DelayPredictedEvent.InputTuple,
      DelayPredictedEvent.OutputTuple,
      DelayPredictedEvent.OutputObject
    >;
    DelayPredicted: TypedContractEvent<
      DelayPredictedEvent.InputTuple,
      DelayPredictedEvent.OutputTuple,
      DelayPredictedEvent.OutputObject
    >;

    "OrderApproved(string,address,uint256,uint256)": TypedContractEvent<
      OrderApprovedEvent.InputTuple,
      OrderApprovedEvent.OutputTuple,
      OrderApprovedEvent.OutputObject
    >;
    OrderApproved: TypedContractEvent<
      OrderApprovedEvent.InputTuple,
      OrderApprovedEvent.OutputTuple,
      OrderApprovedEvent.OutputObject
    >;

    "OrderCreated(string,string,string)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OrderDeclined(string,address)": TypedContractEvent<
      OrderDeclinedEvent.InputTuple,
      OrderDeclinedEvent.OutputTuple,
      OrderDeclinedEvent.OutputObject
    >;
    OrderDeclined: TypedContractEvent<
      OrderDeclinedEvent.InputTuple,
      OrderDeclinedEvent.OutputTuple,
      OrderDeclinedEvent.OutputObject
    >;

    "PartnerAdded(string,string,address)": TypedContractEvent<
      PartnerAddedEvent.InputTuple,
      PartnerAddedEvent.OutputTuple,
      PartnerAddedEvent.OutputObject
    >;
    PartnerAdded: TypedContractEvent<
      PartnerAddedEvent.InputTuple,
      PartnerAddedEvent.OutputTuple,
      PartnerAddedEvent.OutputObject
    >;

    "ShipmentCompleted(string)": TypedContractEvent<
      ShipmentCompletedEvent.InputTuple,
      ShipmentCompletedEvent.OutputTuple,
      ShipmentCompletedEvent.OutputObject
    >;
    ShipmentCompleted: TypedContractEvent<
      ShipmentCompletedEvent.InputTuple,
      ShipmentCompletedEvent.OutputTuple,
      ShipmentCompletedEvent.OutputObject
    >;

    "ShipmentStarted(string,string)": TypedContractEvent<
      ShipmentStartedEvent.InputTuple,
      ShipmentStartedEvent.OutputTuple,
      ShipmentStartedEvent.OutputObject
    >;
    ShipmentStarted: TypedContractEvent<
      ShipmentStartedEvent.InputTuple,
      ShipmentStartedEvent.OutputTuple,
      ShipmentStartedEvent.OutputObject
    >;

    "UserLocationUpdated(address,int256,int256)": TypedContractEvent<
      UserLocationUpdatedEvent.InputTuple,
      UserLocationUpdatedEvent.OutputTuple,
      UserLocationUpdatedEvent.OutputObject
    >;
    UserLocationUpdated: TypedContractEvent<
      UserLocationUpdatedEvent.InputTuple,
      UserLocationUpdatedEvent.OutputTuple,
      UserLocationUpdatedEvent.OutputObject
    >;
  };
}
